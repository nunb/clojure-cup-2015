; CIDER 0.10.0 (package: 20151203.155) (Java 1.8.0_66-internal, Clojure 1.7.0, nREPL 0.2.12)
user> 
parenode.compiler> (scheme->clj '(+ 1 2))
;;=> (+ 1 2)
parenode.compiler> (scheme->clj '(+ 1 2))
;;=> 3
parenode.compiler> (scheme->clj (+ 1 2))
;;=> 3
parenode.compiler> (scheme->clj '(car (1 2 3)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: car in this context, compiling:(*cider-repl parenode*:9:33) 
parenode.compiler> (scheme->clj (car (1 2 3)))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  parenode.compiler/eval24125 (form-init537953640549538832.clj:11)
parenode.compiler> (scheme->clj (car '(1 2 3)))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  parenode.compiler/eval24127 (form-init537953640549538832.clj:13)
parenode.compiler> (scheme->clj (car '(1 2 3)))
;;=> 1
parenode.compiler> (scheme->clj (car (1 2 3)))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  parenode.compiler/eval24295 (form-init537953640549538832.clj:17)
parenode.compiler> (scheme->clj (car '(1 2 3)))
;;=> 1
parenode.compiler> (scheme->clj '(car '(1 2 3)))
;;=> (car (quote (1 2 3)))
parenode.compiler> (scheme->clj '(car (1 2 3)))
;;=> (car (1 2 3))
parenode.compiler> (scheme->clj '(car (1 2 3)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: an_exp in this context, compiling:(*cider-repl parenode*:47:37) 
parenode.compiler> (scheme->clj '(car (1 2 3)))
;;=> (car (1 2 3))
parenode.compiler> (scheme->clj (car '(1 2 3)))
;;=> 1
parenode.compiler> (scheme->clj '(car (1 2 3)))
;;=> (car (1 2 3))
parenode.compiler> (scheme->clj (car '(1 2 3)))
;;=> 1
parenode.compiler> (scheme->clj '(car '(1 2 3)))
;;=> (car (quote (1 2 3)))
parenode.compiler> (scheme->clj `~'(car '(1 2 3)))
;;=> (car (quote (1 2 3)))
parenode.compiler> (scheme->clj ~'(car '(1 2 3)))
IllegalStateException Attempting to call unbound fn: #'clojure.core/unquote  clojure.lang.Var$Unbound.throwArity (Var.java:43)
parenode.compiler> (unquote '(car '(1 2 3)))
IllegalStateException Attempting to call unbound fn: #'clojure.core/unquote  clojure.lang.Var$Unbound.throwArity (Var.java:43)
parenode.compiler> `(unquote '(car '(1 2 3)))
;;=> (clojure.core/unquote (quote (parenode.compiler/car (quote (1 2 3)))))
parenode.compiler> (scheme->clj `(unquote  '(car '(1 2 3))))
;;=> (clojure.core/unquote (quote (parenode.compiler/car (quote (1 2 3)))))
parenode.compiler> (t '(+ 2 1))
ClassCastException clojure.lang.PersistentList cannot be cast to clojure.lang.IFn  parenode.compiler/eval24694 (form-init537953640549538832.clj:47)
parenode.compiler> (t '(+ 2 1))
;;=> (+ 2 1)
parenode.compiler> (sheme->clj  (t '(+ 2 1)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: sheme->clj in this context, compiling:(*cider-repl parenode*:51:19) 
parenode.compiler> (scheme->clj  (t '(+ 2 1)))
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'parenode.compiler/t, compiling:(*cider-repl parenode*:53:19) 
parenode.compiler> (scheme->clj  '(+ 1 2))
;;=> 3
parenode.compiler> (scheme->clj  '(car (1 2 3)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: car in this context, compiling:(*cider-repl parenode*:57:34) 
parenode.compiler> (scheme->clj  (car (1 2 3)))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  parenode.compiler/eval24872 (form-init537953640549538832.clj:59)
parenode.compiler> (scheme->clj  (car '(1 2 3)))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  parenode.compiler/eval24874 (form-init537953640549538832.clj:61)
parenode.compiler> (scheme->clj  (lambda(x) (+ 1 x)))
;;=> #object[parenode.compiler$eval24876$fn__24877 0x71e3e04e "parenode.compiler$eval24876$fn__24877@71e3e04e"]
parenode.compiler> (scheme->clj  ((lambda(x) (+ 1 x)) 3))
;;=> 4
parenode.compiler> (scheme->clj  '((lambda(x) (+ 1 x)) 3))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: lambda in this context, compiling:(*cider-repl parenode*:67:35) 
parenode.compiler> (scheme->clj (clojure.core/eval '(car '
                                                     (1 2 3))))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: car in this context, compiling:(*cider-repl parenode*:69:52) 
parenode.compiler> (scheme->clj (clojure.core/eval '(car '
                                                     (1 2 3))))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  parenode.compiler/eval25050 (form-init537953640549538832.clj:72)
parenode.compiler> (scheme->clj (clojure.core/eval '(car '(1 2 3))))
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  parenode.compiler/eval25052 (form-init537953640549538832.clj:75)
parenode.compiler> (clojure.core/eval '(car '(1 2 3)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: car in this context, compiling:(*cider-repl parenode*:77:39) 
parenode.compiler> (scheme->clj  '((lambda(x) (+ 1 x)) 3))
;;=> ((lambda (x) (+ 1 x)) 3)
parenode.compiler> (scheme->clj  ((lambda(x) (+ 1 x)) 3))
;;=> 4
parenode.compiler> `~@(first (rest '(1 2 3)))
IllegalStateException splice not in list  clojure.lang.LispReader$SyntaxQuoteReader.syntaxQuote (LispReader.java:891)
parenode.compiler> `(~@(first (rest '(1 2 3))))
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:528)
parenode.compiler> (scheme->clj  (list + 1 2))
;;=> (#object[clojure.core$_PLUS_ 0x5731ed37 "clojure.core$_PLUS_@5731ed37"] 1 2)
parenode.compiler> (scheme->clj  '(list + 1 2))
;;=> (list + 1 2)
parenode.compiler> (scheme->clj  (list + 1 2))
;;=> (#object[clojure.core$_PLUS_ 0x5731ed37 "clojure.core$_PLUS_@5731ed37"] 1 2)
parenode.compiler> (scheme->clj  (/ 1 2))
;;=> 1/2
parenode.compiler> (read-string "(+ 1 2)")
;;=> (+ 1 2)
parenode.compiler> (scheme->clj  (read-string "(+ 1 2)"))
;;=> (+ 1 2)
parenode.compiler> (scheme->clj  `(~@(read-string "(+ 1 2)")))
;;=> (+ 1 2)
parenode.compiler> (scheme->clj  (scheme->clj (read-string "(+ 1 2)")))
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'parenode.compiler/scheme->clj, compiling:(*cider-repl parenode*:101:19) 
parenode.compiler> (scheme->clj  (eval  (scheme->clj (read-string "(+ 1 2)"))))
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'parenode.compiler/scheme->clj, compiling:(*cider-repl parenode*:103:19) 
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'parenode.compiler/scheme->clj, compiling:(/home/rafik/work/clojure-cup-2015/parenode/src/parenode/compiler.clj:1:6631) 
parenode.compiler> (scheme->clj  '((lambda(x) (+ 1 x)) 3))
;;=> ((lambda (x) (+ 1 x)) 3)
parenode.compiler> (t '(1 2))
;;=> (1 2)
parenode.compiler> (t (read-string "(+ 1 2)"))
;;=> (+ 1 2)
parenode.compiler> (clojure.pprint/pprint  (macro-expand  '(t (read-string "(+ 1 2)"))))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: macro-expand in this context, compiling:(*cider-repl parenode*:112:43) 
parenode.compiler> (clojure.pprint/pprint  (macroexpand  '(t (read-string "(+ 1 2)"))))
((parenode.compiler/scheme->clj read-string)
 (parenode.compiler/scheme->clj "(+ 1 2)"))
;;=> nil
parenode.compiler> (clojure.pprint/pprint  (macroexpand  '(t (read-string "(+ 1 2)"))))
((parenode.compiler/scheme->clj read-string)
 (parenode.compiler/scheme->clj "(+ 1 2)"))
;;=> nil
parenode.compiler> (scheme->clj  (read-string "(+ 2 3)"))
;;=> (+ 2 3)
parenode.compiler> (clojure.pprint/pprint  (macroexpand '(scheme->clj  (read-string "(+ 2 3)"))))
((parenode.compiler/scheme->clj read-string)
 (parenode.compiler/scheme->clj "(+ 2 3)"))
;;=> nil
parenode.compiler> (let [a (read-string "(+ 2 3)")] (clojure.pprint/pprint  (macroexpand '(scheme->clj a )))) )
a
;;=> nilRuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
parenode.compiler> (let [a (read-string "(+ 2 3)")] (clojure.pprint/pprint  (macroexpand '(scheme->clj a )))) 
a
;;=> nil
parenode.compiler> (t (read-string "(+ 1 2)"))
;;=> (parenode.compiler/scheme->clj (+ 1 2))
parenode.compiler> (eval  (t (read-string "(+ 1 2)")))
;;=> 3
parenode.compiler> (eval  (t (read-string "(let ((a 1) (b 2)) (+ a b))")))
CompilerException java.lang.RuntimeException: Can't take value of a macro: #'clojure.core/let, compiling:(*cider-repl parenode*:138:19) 
parenode.compiler> (eval  (t (read-string "(letrec* ((a 1) (b 2)) (+ a b))")))
;;=> 3
parenode.compiler> (evaluate! "(+ 1 2)")
CompilerException java.lang.RuntimeException: No such var: parenode.compiler/call-scheme->clj, compiling:(*cider-repl parenode*:142:19) 
parenode.compiler> (evaluate! "(+ 1 2)")
;;=> 3
parenode.compiler> (call-scheme->clj (read-string  "(+ 1 2)"))
;;=> (parenode.compiler/scheme->clj (+ 1 2))
parenode.compiler> (call-scheme->clj (read-string  "(+ 1 2)"))
;;=> (+ 1 2)
parenode.compiler> (call-scheme->clj (read-string  "(+ 1 2)"))
;;=> (parenode.compiler/scheme->clj (+ 1 2))
parenode.compiler> (call-scheme->clj (read-string  "(+ 1 2)"))
;;=> (parenode.compiler/scheme->clj (+ 1 2))
parenode.compiler> (call-scheme->clj (read-string  "(+ 1 2)"))
;;=> (+ 1 2)
parenode.compiler> (evaluate! "(+ 2 3)")
;;=> 5
parenode.compiler> (evaluate! "(+ 2 3)")
;;=> 5
parenode.compiler> (call-scheme->clj (read-string  "(+ 1 2)"))
;;=> (parenode.compiler/scheme->clj (+ 1 2))
parenode.compiler> (clojure.pprint/pprint  (macroexpand '(scheme->clj  (read-string "(+ 2 3)"))))
((parenode.compiler/scheme->clj read-string)
 (parenode.compiler/scheme->clj "(+ 2 3)"))
;;=> nil
parenode.compiler> `(scheme->clj ~(read-string "(+ 1 2)"))
;;=> (parenode.compiler/scheme->clj (+ 1 2))
parenode.compiler> (defmacro a [x]  `(scheme->clj ~(read-string x)))