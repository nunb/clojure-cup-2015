;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name parenode.compiler, :imports nil, :requires {reader cljs.reader, cljs.reader cljs.reader}, :uses nil, :defs {scheme->cljs {:protocol-inline nil, :meta {:source "scheme->cljs", :file "NO_SOURCE_FILE", :line 1, :column 11, :end-line 1, :end-column 23, :macro true, :arglists (quote ([exp]))}, :name parenode.compiler/scheme->cljs, :variadic false, :file "<cljs repl>", :end-column 23, :method-params ([&form &env exp]), :protocol-impl nil, :source "scheme->cljs", :arglists-meta (nil nil), :column 1, :line 1, :macro true, :end-line 1, :max-fixed-arity 3, :fn-var true, :arglists (quote ([exp]))}}, :require-macros {macros parenode.macros, parenode.macros parenode.macros}, :cljs.analyzer/constants {:seen #{cljs.core/rest parenode.compiler/scheme->cljs a :else cons cljs.core/deref :ns :name :file :end-column car :source lambda if :column exp cljs.core/cond :line scheme->cljsfqsdfqdsfsqdf :macro parenode.compiler cljs.core/fn define :end-line cdr cljs.core/cons scheme->cljs quote :arglists :doc cljs.core/first :test def}, :order [:else car cljs.core/first parenode.compiler/scheme->cljs a :ns :name :file :end-column :source :column :line :end-line :arglists :doc :test parenode.compiler scheme->cljs exp quote define def lambda cljs.core/fn cons cljs.core/cons cdr cljs.core/rest if cljs.core/deref cljs.core/cond :macro scheme->cljsfqsdfqdsfsqdf]}, :doc nil}